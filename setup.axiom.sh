#!/bin/bash

# ==============================================================================
# Axiom Project Scaffolding Script
# Run this from your project's root directory.
# It will create new files and directories, and provide instructions for edits
# to existing files without overwriting anything.
# ==============================================================================

# --- Helper function for clear output ---
print_info() {
    echo "âœ…  $1"
}

print_edit_instruction() {
    echo "ðŸ”µ  EDIT REQUIRED: For file '$1', please add the following code:"
    echo "----------------------------------------------------------------------"
    # Use cat to print the heredoc content without executing it
    cat
    echo "----------------------------------------------------------------------"
    echo ""
}

# --- 1. Create New Directories (Safe with -p) ---
print_info "Creating new directories..."
mkdir -p prompts/roles
mkdir -p workspace
echo ""

# --- 2. Create New Project Files (Only if they don't exist) ---
print_info "Checking for new files to create..."

# Main CLI Entrypoint: axiom.py
if [ ! -f "axiom.py" ]; then
    print_info "Creating 'axiom.py'..."
    cat <<'EOF' > axiom.py
import argparse
import os
from toolkit.ai.agent import OrchestratorAgent
from toolkit.utils.config import get_axiom_config

def main():
    """Main entry point for the Axiom CLI."""
    config = get_axiom_config()
    
    parser = argparse.ArgumentParser(description="Axiom: A Self-Improving Agentic Framework")
    parser.add_argument("task", type=str, help="The main task for the agent to perform.")
    parser.add_argument("--role", type=str, default="coder", help="The role for the agent to adopt (e.g., coder, architect).")
    parser.add_argument("--show-config", action="store_true", help="Display the current Axiom configuration.")

    args = parser.parse_args()

    if args.show_config:
        print("Axiom Configuration:")
        for key, value in config.items():
            print(f"  {key}: {value}")
        return

    # Initialize and run the orchestrator
    orchestrator = OrchestratorAgent(config=config)
    orchestrator.execute_task(args.task, role=args.role)

if __name__ == "__main__":
    main()
EOF
else
    print_info "'axiom.py' already exists. No action taken."
fi

# Core Agent Logic: src/toolkit/ai/agent.py
if [ ! -f "src/toolkit/ai/agent.py" ]; then
    print_info "Creating 'src/toolkit/ai/agent.py'..."
    cat <<'EOF' > src/toolkit/ai/agent.py
import os
import json
from datetime import datetime
from .client import GeminiClient # Assuming your existing client is here
from toolkit.system.executor import create_file, read_file, update_file # We will add these

class CoreAgent:
    """A core agent responsible for executing a single, well-defined task."""
    def __init__(self, role="coder", config=None):
        self.role = role
        self.config = config or {}
        self.client = GeminiClient() # Initialize your Gemini client
        self.prompt_template = self._load_role_prompt()

    def _load_role_prompt(self):
        roles_dir = self.config.get('roles_dir', 'prompts/roles')
        prompt_path = os.path.join(roles_dir, f"{self.role}.md")
        if not os.path.exists(prompt_path):
            raise FileNotFoundError(f"Role prompt not found at {prompt_path}")
        return read_file(prompt_path)

    def execute_task(self, task_prompt: str):
        """Executes a task and returns the result."""
        full_prompt = f"{self.prompt_template}\n\n## User Task\n\n{task_prompt}"
        
        # This is a simplified interaction loop
        print(f"Executing task with role '{self.role}'...")
        response = self.client.generate_text(full_prompt) # Or your equivalent method
        
        # Example of using a tool
        if "<execute_create_file>" in response:
            # A real implementation would parse this properly
            path = "workspace/example.py"
            content = "# Generated by CoreAgent"
            create_file(path, content)
            response += f"\n\n[System: Created file at {path}]"
            
        return response

class OrchestratorAgent:
    """Delegates complex tasks to CoreAgents."""
    def __init__(self, config):
        self.config = config
        self.workspace_dir = config.get('workspace_dir', 'workspace')

    def execute_task(self, task: str, role: str):
        # Create a unique directory for this task in the workspace
        task_id = f"{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}_{role}"
        task_dir = os.path.join(self.workspace_dir, task_id)
        os.makedirs(task_dir, exist_ok=True)

        # For now, we delegate directly to a CoreAgent
        agent = CoreAgent(role=role, config=self.config)
        response = agent.execute_task(task)

        # Save prompt and response
        create_file(os.path.join(task_dir, "prompt.md"), task)
        create_file(os.path.join(task_dir, "response.md"), response)
        
        print(f"\nâœ… Task complete. Output saved in: {task_dir}")

EOF
else
    print_info "'src/toolkit/ai/agent.py' already exists. No action taken."
fi

# Role Prompts
if [ ! -f "prompts/roles/coder.md" ]; then
    print_info "Creating 'prompts/roles/coder.md'..."
    echo "You are an expert software developer. Your task is to write clean, efficient, and correct code based on the user's request. You must only output code, with no additional commentary." > prompts/roles/coder.md
else
    print_info "'prompts/roles/coder.md' already exists. No action taken."
fi

if [ ! -f "prompts/roles/architect.md" ]; then
    print_info "Creating 'prompts/roles/architect.md'..."
    echo "You are a principal systems architect. Your task is to design robust, scalable software and infrastructure architectures. Provide clear, detailed plans. You can specify file creation and modification tasks." > prompts/roles/architect.md
else
    print_info "'prompts/roles/architect.md' already exists. No action taken."
fi

if [ ! -f "prompts/roles/auditor.md" ]; then
    print_info "Creating 'prompts/roles/auditor.md'..."
    echo "You are a quality assurance and code auditor AI. Your task is to analyze code or text for correctness, efficiency, and adherence to best practices. Provide a score from 1-10 and a brief justification for your findings." > prompts/roles/auditor.md
else
    print_info "'prompts/roles/auditor.md' already exists. No action taken."
fi

echo ""

# --- 3. Provide Edit Instructions for Existing Files ---
print_info "Checking for existing files to provide edit instructions..."

# config.toml
if [ -f "config.toml" ]; then
    print_edit_instruction "config.toml" <<'EOF'
# Add this section to your config.toml to configure Axiom
[axiom]
workspace_dir = "workspace"
prompts_dir = "prompts"
roles_dir = "prompts/roles"
EOF
else
    print_info "'config.toml' not found. Please create it with the necessary [axiom] section."
fi

# src/toolkit/utils/config.py
if [ -f "src/toolkit/utils/config.py" ]; then
    print_edit_instruction "src/toolkit/utils/config.py" <<'EOF'
import toml

# Add this function to load the [axiom] section from your config
def get_axiom_config():
    """Loads the Axiom-specific configuration from the root config.toml file."""
    try:
        with open("config.toml", "r") as f:
            config = toml.load(f)
        return config.get("axiom", {})
    except FileNotFoundError:
        return {}
EOF
else
    print_info "'src/toolkit/utils/config.py' not found. No edit instructions to provide."
fi

# src/toolkit/system/executor.py
if [ -f "src/toolkit/system/executor.py" ]; then
    print_edit_instruction "src/toolkit/system/executor.py" <<'EOF'
import os

# Add these file system utility functions.
# Ensure they have proper error handling for production use.

def create_file(path: str, content: str):
    """Creates a file at the given path with the specified content."""
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path, "w") as f:
            f.write(content)
        print(f"File created: {path}")
        return True
    except Exception as e:
        print(f"Error creating file {path}: {e}")
        return False

def read_file(path: str) -> str:
    """Reads the content of a file."""
    try:
        with open(path, "r") as f:
            return f.read()
    except Exception as e:
        print(f"Error reading file {path}: {e}")
        return ""

def update_file(path: str, content: str):
    """Appends content to an existing file."""
    try:
        with open(path, "a") as f:
            f.write(content)
        print(f"File updated: {path}")
        return True
    except Exception as e:
        print(f"Error updating file {path}: {e}")
        return False

def create_directory(path: str):
    """Creates a directory if it doesn't exist."""
    try:
        os.makedirs(path, exist_ok=True)
        print(f"Directory created: {path}")
        return True
    except Exception as e:
        print(f"Error creating directory {path}: {e}")
        return False
EOF
else
    print_info "'src/toolkit/system/executor.py' not found. No edit instructions to provide."
fi

print_info "Script finished. Please review the instructions for any required edits."
